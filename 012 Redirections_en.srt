1
00:00:00,420 --> 00:00:07,530
OK, next, we're going to see input output redirection so we know standard output device to our computer

2
00:00:08,189 --> 00:00:13,820
is the monitor the screen so we run anything on our computer, any program.

3
00:00:14,190 --> 00:00:17,130
The output mostly will be coming on the screen.

4
00:00:17,170 --> 00:00:17,450
Right.

5
00:00:22,210 --> 00:00:29,950
Like we run the uptime command. Output is on the screen, see, possibly it's coming on the screen, so if

6
00:00:29,950 --> 00:00:34,850
there is an output needs to be printed, the standard output devices or screen.

7
00:00:34,930 --> 00:00:36,760
Yes, that's also common sense.

8
00:00:37,400 --> 00:00:43,380
But my point is you can change that standard output device for a command that you're running.

9
00:00:43,390 --> 00:00:44,470
Let's say you're running uptime.

10
00:00:44,470 --> 00:00:44,800
Come on.

11
00:00:44,800 --> 00:00:46,540
And you don't want to print it on the screen.

12
00:00:46,540 --> 00:00:49,510
Maybe you want to redirect it to another fine.

13
00:00:50,080 --> 00:00:53,410
So use the redirection symbol and let's create a file.

14
00:00:53,410 --> 00:00:58,610
It's in /tmp directory. I will say /tmp/sysinfo.txt.

15
00:01:00,690 --> 00:01:03,100
So you see the output did not come on the screen.

16
00:01:03,100 --> 00:01:04,360
It went to this file.

17
00:01:08,250 --> 00:01:13,200
Right? like that, I'm running ls Command showing on the screen, I can redirect it  to the same

18
00:01:13,200 --> 00:01:16,680
file, but what happens when I do redirection is.

19
00:01:18,850 --> 00:01:23,650
If the file does not exist, it will create the file, if the file already exist, it will.

20
00:01:23,650 --> 00:01:25,010
Overwrite its content

21
00:01:25,870 --> 00:01:26,130
All right.

22
00:01:26,170 --> 00:01:30,700
So previously we had this content and now if you see the content would be overwritten.

23
00:01:32,020 --> 00:01:37,350
Right now, if you have the file names from the ls command, but if you don't want to overwrite.

24
00:01:37,350 --> 00:01:43,080
You just want to upend the content and you can use double arrows, output redirection appended.

25
00:01:47,190 --> 00:01:49,300
OK, now we will see /tmp/sysinfo.txt

26
00:01:50,620 --> 00:01:51,760
.

27
00:01:53,510 --> 00:01:54,680
Now, the other content.

28
00:01:55,830 --> 00:02:01,260
OK, I'll show you now three simple commands in the next one, you have already seen uptime that shows

29
00:02:01,260 --> 00:02:07,920
the up time. free -m that is going to show you the memory utilization. Memory means the RAM, the

30
00:02:07,920 --> 00:02:10,740
physical RAM. Swap is the virtual memory.

31
00:02:11,720 --> 00:02:18,860
So physical RAM, is says total 486 mb, 100 is used, 35 is free, 369 is available.

32
00:02:19,460 --> 00:02:20,720
OK, so.

33
00:02:22,100 --> 00:02:24,500
I will redirect that information to the file.

34
00:02:25,100 --> 00:02:31,510
One more df -h, this is going to show you the hard disk partition utilization.

35
00:02:31,520 --> 00:02:35,970
So that is your root partition and it is size 50GB, it says.

36
00:02:35,990 --> 00:02:39,080
1.5 gb is used, 49GB

37
00:02:39,080 --> 00:02:40,430
GB is available.

38
00:02:40,850 --> 00:02:42,890
It's mounted at root dir /

39
00:02:43,430 --> 00:02:46,670
Will learn this command later in detail and just.

40
00:02:47,610 --> 00:02:50,310
I want to show you some command, so we can use its output.

41
00:02:51,190 --> 00:02:57,180
And I'll also show you one more command echo, echo is a print command, so what do you want to print

42
00:02:57,390 --> 00:02:57,810
like?

43
00:02:59,350 --> 00:03:00,010
Good morning.

44
00:03:02,530 --> 00:03:03,700
It's just going to print it.

45
00:03:04,600 --> 00:03:05,150
That's OK.

46
00:03:05,180 --> 00:03:11,500
So now I'm going to use this echo, command, and print some hash and not really print, I'm going

47
00:03:11,500 --> 00:03:18,340
to send it to the file, /tmp/sysinfo.txt. So I use single redirection, everything will be replaced.

48
00:03:20,310 --> 00:03:27,250
There's also one more commands output I would like to redirect, date, let's do it once again will redirect

49
00:03:27,300 --> 00:03:32,640
the output of /tmp/sysinfo.txt

50
00:03:34,530 --> 00:03:37,170
And let's do this one once again, but now.

51
00:03:38,240 --> 00:03:38,930
Double arrow.

52
00:03:39,850 --> 00:03:48,040
So you have date in the file, then this hash, and then I'll put the uptime command output. uptime >>

53
00:03:48,490 --> 00:03:51,200
/tmp/sysinfo.txt

54
00:03:52,450 --> 00:03:54,790
And let's put this hash once again.

55
00:03:57,500 --> 00:04:00,050
Then the output of free -m

56
00:04:05,150 --> 00:04:09,590
Again, hash, then output of df -h

57
00:04:13,810 --> 00:04:15,190
I mean, again, hash.

58
00:04:17,649 --> 00:04:23,210
OK, now let's see the content of the file.

59
00:04:25,220 --> 00:04:28,050
That looks fancy at this particular time.

60
00:04:28,880 --> 00:04:31,730
This was the up time, this was the RAM utilization.

61
00:04:31,760 --> 00:04:33,380
This was the disk  utilization.

62
00:04:35,570 --> 00:04:38,690
Now, this will be very handy when we are writing Bash scripts.

63
00:04:39,790 --> 00:04:42,340
So that's about output reduction.

64
00:04:43,650 --> 00:04:49,830
to a file, but if you don't want to see output. Not on the screen, not in any file, then you can readirect

65
00:04:50,010 --> 00:04:54,880
the output to somewhere else, which is /dev/null

66
00:04:54,910 --> 00:04:57,690
Now, this is a file that does not contain anything.

67
00:04:57,930 --> 00:05:00,810
And if you throw anything in this, then it's gone.

68
00:05:00,810 --> 00:05:02,540
It's like a black hole in galaxy.

69
00:05:03,270 --> 00:05:04,250
So let me show you this.

70
00:05:04,260 --> 00:05:09,330
I ran the command yum install vim -y which is going to generate a lot of output.

71
00:05:09,660 --> 00:05:10,950
But I don't want to see the output.

72
00:05:10,950 --> 00:05:14,070
I just say output reduction and dev null.

73
00:05:15,920 --> 00:05:17,440
So you see output is gone.

74
00:05:17,510 --> 00:05:24,610
OK, we're not seeing it now, if you want, you do dev null thinking that the content will be there,

75
00:05:24,610 --> 00:05:27,340
but there's nothing in that, just like a black hole.

76
00:05:28,500 --> 00:05:30,970
One more use of  /dev/null file, I'll show you.

77
00:05:31,980 --> 00:05:34,870
So let's say I want to clear this file content.

78
00:05:34,950 --> 00:05:36,420
I don't want anything in that.

79
00:05:36,430 --> 00:05:43,500
Yes, you can open, do delete all the content, but there is an easy way you can do cat /dev/null and redirect

80
00:05:43,500 --> 00:05:45,270
the output to file.

81
00:05:45,810 --> 00:05:48,360
And that file will have then nothing.

82
00:05:49,270 --> 00:05:51,170
That sounds a little philosophical, right?

83
00:05:51,780 --> 00:05:57,040
It's very handy. Now if you check the file content, everything will be wiped out clean.

84
00:05:58,250 --> 00:06:05,420
So what came out of /dev/null file was nothing, and we redirected nothing to a file and then the file

85
00:06:05,420 --> 00:06:06,200
became nothing.

86
00:06:07,200 --> 00:06:10,170
OK, these tricks will be very handy in bash scripting.

87
00:06:11,410 --> 00:06:16,690
OK, so that's redirecting standard output, but you get errors sometime.

88
00:06:17,990 --> 00:06:24,790
Like, I'm running command free -m, I redirect the output to /dev/null or any such output?

89
00:06:25,700 --> 00:06:32,390
I didn't see anything, but if you make any errors, So I will or give a wrong command, it's too eeeee in free

90
00:06:32,390 --> 00:06:32,760
freeeeeeeee

91
00:06:33,770 --> 00:06:35,930
So you see now the error comes.

92
00:06:35,960 --> 00:06:36,470
command not found

93
00:06:36,470 --> 00:06:37,220
Not found.

94
00:06:37,880 --> 00:06:42,020
If you don't want to see the error, you can do 2

95
00:06:43,720 --> 00:06:51,640
Output redirection 2 means standard error, and if you would like to redirect it to a proper file like

96
00:06:51,640 --> 00:06:55,030
/tmp/error.log

97
00:06:57,790 --> 00:07:05,110
OK, then you do cat /tmp/error.log. Now you will see error there. So 2 is for standard error.

98
00:07:05,890 --> 00:07:08,530
1 is for standard output, which is by default.

99
00:07:15,890 --> 00:07:21,800
If you don't give one, even though it is the default value one, which is standard output, one, standard

100
00:07:21,800 --> 00:07:28,160
output to standard error, but if you would like to redirect any kind of output, so you can just say

101
00:07:28,160 --> 00:07:34,190
&, so if it's an output or even if it's it, it's an error.

102
00:07:35,480 --> 00:07:36,980
Anything goes to that file.

103
00:07:42,330 --> 00:07:45,750
So you see output came and then also error came to this file.

104
00:07:46,930 --> 00:07:52,840
So programs or processes that are running behind the scenes will be directing output to a file, those files,

105
00:07:52,840 --> 00:07:54,520
we call as log file.

106
00:07:55,150 --> 00:07:57,310
So whatever log file you see in /var/log

107
00:07:57,550 --> 00:07:58,270
.

108
00:08:00,560 --> 00:08:06,980
These log files are getting generated or their content is getting created from processes that are running

109
00:08:06,980 --> 00:08:13,040
behind the scene and they generate output, so they redirect either error to a specific file output

110
00:08:13,040 --> 00:08:16,600
to another file, or sometimes both to one single file.

111
00:08:17,600 --> 00:08:18,560
Like &.

112
00:08:20,340 --> 00:08:25,630
Now, I'm saying this is handy in bash script because we write bash script, we run them in the background or any

113
00:08:25,630 --> 00:08:30,760
kind of script, and we want to redirect that output to some file so we can review that later.

114
00:08:30,920 --> 00:08:31,180
Right.

115
00:08:31,210 --> 00:08:32,980
Such files are called as log files.

116
00:08:34,090 --> 00:08:40,659
OK, so let me clear the screen now. So that was that was about output reduction, now we're going to

117
00:08:40,659 --> 00:08:42,429
talk about pipe, piping.

118
00:08:43,830 --> 00:08:49,080
So before that, I'll show you one, command, wc -l, this command is going to count line number

119
00:08:49,470 --> 00:08:52,410
and you can give any path for file.

120
00:08:53,070 --> 00:08:55,500
/etc/passwd, it counts.

121
00:08:55,500 --> 00:08:56,570
How many lines are there

122
00:08:56,580 --> 00:08:57,490
25 lines.

123
00:08:58,110 --> 00:09:01,140
So here the input to this command is coming from the file.

124
00:09:04,140 --> 00:09:10,590
But what if you want to count something else, like, for example, you go into /etc dir

125
00:09:10,590 --> 00:09:16,020
Run ls command and you want to count number of files over here

126
00:09:17,160 --> 00:09:18,930
So what you can do here is.

127
00:09:20,630 --> 00:09:22,970
You can run the ls command and then pipe it

128
00:09:24,470 --> 00:09:28,340
That's the symbol of pipe, | , pipe it with a wc -l.

129
00:09:28,880 --> 00:09:35,450
Now, what will happen is, ls is going to generate the output that output goes as an input to the

130
00:09:35,870 --> 00:09:37,100
right hand side commands.

131
00:09:37,250 --> 00:09:38,870
That input will be coming like this.

132
00:09:40,710 --> 00:09:46,410
And so, as it is going to count 186 files total, that's a nice trick.

133
00:09:47,520 --> 00:09:49,860
OK, other things, aa... you want to see.

134
00:09:51,570 --> 00:09:57,570
Search for a file name, let's say, host, that starts with host & ends with anything. Now grep

135
00:09:57,570 --> 00:09:59,610
will get input from this command.

136
00:10:00,620 --> 00:10:03,200
And it's going to search and there's nothing.

137
00:10:04,150 --> 00:10:10,160
Oh, yeah, I don't need to give this star, otherwise it is thinking that it's a file named host*

138
00:10:10,210 --> 00:10:17,700
OK, so ls grep host  and there you go, all the file that starts with the name host.

139
00:10:19,910 --> 00:10:31,760
Or maybe you are doing head to a file, lets say /var/log or tail, lets do tail /var/log/messages

140
00:10:32,690 --> 00:10:44,300
And you want to see if there is some event with named Vagrant, there is nothing, tail -20.

141
00:10:45,350 --> 00:10:45,680
Yeah.

142
00:10:46,970 --> 00:10:54,200
So from last 20 lines of this file, we are searching for texta named vagrant and there we go.

143
00:10:56,440 --> 00:11:02,950
So like that, the numerous benefits of this piping, like free, -m, I just want to see the

144
00:11:02,950 --> 00:11:08,800
ram, I don't want to see Swap, I dont want to see the third line  and I don't want to see the heading.

145
00:11:09,400 --> 00:11:10,690
I just want to see this line.

146
00:11:10,690 --> 00:11:14,380
So I will find something unique over here which does not change like Mem.

147
00:11:15,310 --> 00:11:18,580
So I'm going to say free -m | grep Mem

148
00:11:20,480 --> 00:11:27,050
You can really pipe any command as long as it makes sense, like ls -l and you want to pipe it

149
00:11:27,230 --> 00:11:27,650
with.

150
00:11:27,980 --> 00:11:28,330
tail command

151
00:11:28,490 --> 00:11:30,290
So last 10 files.

152
00:11:31,890 --> 00:11:34,260
Or 1st 10 files.

153
00:11:36,430 --> 00:11:38,510
And then it's all about your imagination.

154
00:11:38,530 --> 00:11:44,020
We're going to do a lot of piping and filtering in scripting, so this will come very useful.

155
00:11:44,590 --> 00:11:48,870
I'll get one more last command on in filter, which is find.

156
00:11:48,880 --> 00:11:51,950
So far, we are looking at the content of the file.

157
00:11:52,210 --> 00:11:57,970
Now, if you want to find the file itself, then you can use find come on, you can say find me a file

158
00:11:58,210 --> 00:12:07,020
in, let's say /etc/ -name and the name of the file, let's say is host or it starts with host the

159
00:12:07,030 --> 00:12:11,020
find and we give the path and we say find it with the name of the file.

160
00:12:12,490 --> 00:12:18,490
And there we go now you can make a search at the root level also, which is searching the entire operating

161
00:12:18,490 --> 00:12:22,000
system, but this may slow down your operating system also.

162
00:12:22,390 --> 00:12:25,830
Now, we don't have many things over here, not any huge data.

163
00:12:26,200 --> 00:12:27,580
So it worked.

164
00:12:28,150 --> 00:12:34,620
But I do not recommend making search the root dir because this this is a real time search.

165
00:12:35,470 --> 00:12:38,380
One easy way of searching is also through locate.

166
00:12:38,380 --> 00:12:38,820
command

167
00:12:38,830 --> 00:12:41,500
But look, it will not be installed by default.

168
00:12:41,500 --> 00:12:45,610
So you have to install this software, mlocate.

169
00:12:52,080 --> 00:12:58,680
mlocate, we  have installed mlocate now you have to run a command called updatedb.

170
00:13:01,440 --> 00:13:06,180
Now, locate, is not a realtime search, so it's going to search from its database, which gets updated

171
00:13:06,180 --> 00:13:09,870
with this command to locate and I say host.

172
00:13:11,400 --> 00:13:15,960
So it's going to search from its database every file that has the name host in it.

173
00:13:16,410 --> 00:13:17,880
And there are quite many files.

174
00:13:19,760 --> 00:13:25,190
Now, it's not a realtime search, so even if you happen to delete some file, it will still be showing

175
00:13:25,190 --> 00:13:28,640
it if as long as you don't run updatedb command.

176
00:13:28,730 --> 00:13:33,770
So before you run the locate command, you make sure you're an update DB so you get right info

177
00:13:33,770 --> 00:13:36,350
or are the existing data

178
00:13:37,910 --> 00:13:44,930
Well, that's all in the filtering here in Pipeing, redirection, run the history, command and see

179
00:13:44,930 --> 00:13:51,130
what are the commands or order of the commands that you executed and practice them more. You should be really

180
00:13:51,140 --> 00:13:54,920
very good in this filtering and redirection before you step in.

181
00:13:54,920 --> 00:13:56,090
Bash scripting.

182
00:13:57,380 --> 00:14:00,590
All right, then, wrap this up and join me in the next video.

